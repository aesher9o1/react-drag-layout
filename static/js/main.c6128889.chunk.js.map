{"version":3,"sources":["config/firebase.js","config/utils.js","components/Datalist.js","components/Drag.js","components/Tasktwo.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","capitalizeFirstLetter","string","charAt","toUpperCase","slice","setArrToFirebase","arr","console","log","database","ref","set","generateSkillsHTMLFromArray","tempList","i","push","value","type","React","memo","props","useState","options","filteredOptions","setFilteredOptions","inputValue","setInputValue","isListVisible","setIsListVisible","useEffect","style","position","onChange","e","length","item","name","startsWith","target","toLowerCase","placeholder","className","map","option","index","key","onClick","handleDropdownChange","handleItemClick","Drag","setOptions","original","html","skills","setSkills","dragStartIndex","draggedOnIndex","draggableItemOptions","setDraggableItemOptions","temp","tag","generateOptionsHTMLFromArr","Promise","resolve","reject","once","then","snapshot","exists","val","obj","onDragOver","onDragEnd","swappedArr","input","x","y","list","b","swap","updatedList","Array","from","Set","renderNormalLayout","idx","Date","getTime","Math","random","draggable","onDragStart","dataTransfer","effectAllowed","setData","parentNode","setDragImage","display","alignItems","color","opacity","modifiedArr","splice","deleteItem","width","height","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","d","undefined","Tasktwo","id","App","axios","get","res","data","items","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6128889.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/database'\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBie5drEp_l3zmNsHUOkMZr2hFVzvZvWqg\",\n  authDomain: \"internshala-video-player-demo.firebaseapp.com\",\n  databaseURL: \"https://internshala-video-player-demo.firebaseio.com\",\n  projectId: \"internshala-video-player-demo\",\n  storageBucket: \"internshala-video-player-demo.appspot.com\",\n  messagingSenderId: \"797710441922\",\n  appId: \"1:797710441922:web:85c9b05edfe7e08f33ca5b\"\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase","import firebase from './firebase'\n\n\nexport const capitalizeFirstLetter = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nexport const getRandomKey = () => {\n    return new Date().getTime() * Math.random()\n}\n\n\nexport const setArrToFirebase = (arr) => {\n    console.log(arr)\n    return firebase.database().ref('dummy').set(arr)\n}\n\nexport const getArrFromFirebase = () => {\n    return new Promise(function (resolve, reject) {\n        firebase.database().ref('dummy').once('value').then(snapshot => {\n            if (snapshot.exists())\n                resolve({\n                    original: snapshot.val(),\n                    html: generateSkillsHTMLFromArray(snapshot.val())\n                })\n            else\n                resolve({\n                    original: [],\n                    html: generateSkillsHTMLFromArray([])\n                })\n        })\n    })\n}\n\nexport const generateSkillsHTMLFromArray = (arr) => {\n    var tempList = []\n    for (var i = 0; i <= 9; i++) {\n        tempList.push({\n            value: arr[i],\n            type: (arr[i]) ? \"active\" : ((arr[i - 1]) ? \"warn\" : \"disabled\")\n        })\n    }\n    return tempList\n}\n\nexport const updateFirebase = (arr) => {\n    arr = arr.filter(object => {\n        return object.value != null ? object.value : false\n    })\n\n    // firebase.database().ref('dummy').set(arr)\n}\n\n\n\nexport const swap = (input, x, y) => {\n    var list = [...input]\n\n    var b = list[y];\n    list[y] = list[x];\n    list[x] = b;\n\n    return list\n}","import React, { useState, useEffect } from 'react'\r\nimport './Datalist.css'\r\nimport { capitalizeFirstLetter } from '../config/utils'\r\n\r\nfunction Datalist(props) {\r\n    const [filteredOptions, setFilteredOptions] = useState(props.options)\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [isListVisible, setIsListVisible] = useState(false)\r\n\r\n    useEffect(() => { }, [props.options])\r\n\r\n    const updateFilter = (e) => {\r\n        let filteredOptions = []\r\n\r\n        for (let i = 0; i < props.options.length; i++) {\r\n            const item = props.options[i]\r\n            if (item.name.startsWith(e.target.value.toLowerCase()))\r\n                filteredOptions.push(item)\r\n        }\r\n\r\n        setFilteredOptions(filteredOptions)\r\n        setInputValue(e.target.value)\r\n\r\n        if (filteredOptions.length === props.options.length)\r\n            setIsListVisible(false)\r\n        else if (filteredOptions.length === 0)\r\n            filteredOptions.push({\r\n                name: e.target.value\r\n            })\r\n        else\r\n            setIsListVisible(true)\r\n    }\r\n\r\n    const handleItemClick = (option) => {\r\n        setIsListVisible(false)\r\n        props.handleDropdownChange(option)\r\n        setInputValue('')\r\n    }\r\n\r\n    return (\r\n        <div style={{ position: 'absolute' }}>\r\n            <input type=\"text\" value={inputValue} onChange={updateFilter} placeholder=\"Add your skill here\" />\r\n            {(isListVisible) ?\r\n                <div className=\"wrapper\">\r\n                    {\r\n                        filteredOptions.map((option, index) => {\r\n                            return (<div key={option.name} onClick={() => handleItemClick(option)} className=\"listItem\">{capitalizeFirstLetter(option.name)}</div>)\r\n                        })\r\n                    }\r\n                </div>\r\n                : <div></div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Datalist)","import React, { useState, useEffect } from 'react'\r\nimport './Drag.css'\r\nimport { getRandomKey, getArrFromFirebase, setArrToFirebase, capitalizeFirstLetter, swap, generateSkillsHTMLFromArray } from '../config/utils'\r\nimport Datalist from './Datalist'\r\n\r\n\r\nfunction Drag(props) {\r\n\r\n    const [options, setOptions] = useState([])\r\n    const [skills, setSkills] = useState({\r\n        original: [],\r\n        html: []\r\n    })\r\n    const [draggableItemOptions, setDraggableItemOptions] = useState({\r\n        dragStartIndex: null,\r\n        draggedOnIndex: null\r\n    })\r\n\r\n    const generateOptionsHTMLFromArr = (arr) => {\r\n        let temp = []\r\n        for (const tag of arr)\r\n            temp.push(<option value={capitalizeFirstLetter(tag.name)} key={tag.name} />)\r\n        return temp\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.options)\r\n            setOptions(generateOptionsHTMLFromArr(props.options))\r\n\r\n        getArrFromFirebase().then(obj => setSkills(obj))\r\n    }, [props.options])\r\n\r\n\r\n    const onDragStart = (e, index) => {\r\n        setDraggableItemOptions({ ...draggableItemOptions, dragStartIndex: index })\r\n\r\n        e.dataTransfer.effectAllowed = \"move\"\r\n        e.dataTransfer.setData(\"text/html\", e.target.parentNode)\r\n        e.dataTransfer.setDragImage(e.target.parentNode, 20, 20)\r\n    }\r\n\r\n    const onDragOver = (index) => {\r\n        //hover on same place\r\n        if (draggableItemOptions.draggedOnIndex === index)\r\n            return\r\n\r\n        setDraggableItemOptions({ ...draggableItemOptions, draggedOnIndex: index })\r\n    }\r\n\r\n    const onDragEnd = () => {\r\n\r\n        if (!skills.html[draggableItemOptions.draggedOnIndex].value)\r\n            return\r\n\r\n\r\n        const swappedArr = swap(skills.original, draggableItemOptions.draggedOnIndex, draggableItemOptions.dragStartIndex)\r\n\r\n        setArrToFirebase(swappedArr)\r\n        setSkills({\r\n            original: swappedArr,\r\n            html: generateSkillsHTMLFromArray(swappedArr)\r\n        })\r\n    }\r\n\r\n    const handleDropdownChange = (option) => {\r\n        const updatedList = Array.from(new Set([...skills.original, capitalizeFirstLetter(option.name)]))\r\n\r\n        setArrToFirebase(updatedList)\r\n        setSkills({\r\n            original: updatedList,\r\n            html: generateSkillsHTMLFromArray(updatedList)\r\n        })\r\n\r\n    }\r\n\r\n    const deleteItem = (idx) => {\r\n        let modifiedArr = [...skills.original]\r\n        modifiedArr.splice(idx, 1)\r\n\r\n        setArrToFirebase(modifiedArr)\r\n        setSkills({\r\n            original: modifiedArr,\r\n            html: generateSkillsHTMLFromArray(modifiedArr)\r\n        })\r\n    }\r\n\r\n\r\n    const renderOptionLayout = () => {\r\n        return (\r\n            <li\r\n                key=\"datalist-field\"\r\n                className={`skills-list--item warn`}>\r\n                <Datalist options={props.options}\r\n                    handleDropdownChange={handleDropdownChange}\r\n                />\r\n            </li>\r\n        )\r\n    }\r\n\r\n    const renderNormalLayout = (item, idx) => {\r\n        return (\r\n            <li key={item.value || getRandomKey()} onDragOver={() => onDragOver(idx)} className={`skills-list--item ${item.type}`}>\r\n                <div\r\n                    className=\"drag\"\r\n                    draggable\r\n                    onDragOver={e => onDragOver(idx)}\r\n                    onDragStart={e => onDragStart(e, idx)}\r\n                    onDragEnd={onDragEnd}>\r\n                    <span style={{ display: \"flex\", alignItems: \"center\" }}>{(item.value) ? `${idx + 1}.  ${item.value}` : \"Add your skill here\"}</span>\r\n                    <button style={{ color: \"white\", opacity: 0.8 }} onClick={() => deleteItem(idx)}>\r\n                        <svg width=\"24\" height=\"24\" fill=\"none\" stroke=\"grey\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"   ><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M15 9l-6 6M9 9l6 6\"></path>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <b>The skills you mention here will help hackathon organizers in assessing you as a potential participant</b>\r\n            <ul>\r\n                {skills.html.map((item, idx) =>\r\n                    (item.type === \"warn\" || (idx === 0 && item.value === undefined)) ? renderOptionLayout() : renderNormalLayout(item, idx)\r\n                )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Drag","import React from 'react'\r\nimport './Tasktwo.css'\r\n\r\nfunction Tasktwo() {\r\n    const h1Text = \"DESIGNING / BUILDING / CODING / HACKING\"\r\n    const h2Text = \"NETWORKING / FRIENDS / MENTORS / COMPETITIONS\"\r\n    const h3Text = \"COFFEE / TEA / GREEN TEA / FOOD / SNACKS / SWAGS / T-SHIRTS\"\r\n    const h4Text = \"SUPER FAST INTERNET / TALKS / DID WE MENTION GREEN TEA? / PRIZES / BRAND NEW APIs\"\r\n    const h5Text = \"AND / A / WHOLE / LOT / MORE\"\r\n\r\n    return (\r\n        <div id=\"main_content\" >\r\n            <div className=\"square-dark-pink\" />\r\n            <div className=\"small-blue\" />\r\n            <div className=\"circle\" />\r\n            <div className=\"small-pink-square\" />\r\n            <div className=\"medium-pink-square\" />\r\n            <div className=\"mini-blue-square\" />\r\n\r\n            <div id=\"container\">\r\n                <div className=\"number\">30</div>\r\n                <div>\r\n                    <i className=\"hours\">HOURS</i>\r\n                    <i className=\"hours of\">OF ...</i>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"bottom-section\">\r\n                <h1>{h1Text}</h1>\r\n                <h2>{h2Text}</h2>\r\n                <h3>{h3Text}</h3>\r\n                <h4>{h4Text}</h4>\r\n                <h5>{h5Text}<hr className=\"underline\" /></h5>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasktwo","import React, { useState, useEffect } from 'react'\nimport Drag from './components/Drag'\nimport Tasktwo from './components/Tasktwo'\nimport axios from 'axios'\nimport skills from './config/demoSkills.json'\n\n\nfunction App() {\n  const [options, setOptions] = useState(null)\n\n  useEffect(() => {\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development')\n      setOptions(skills.items)\n    else\n      axios.get('https://api.stackexchange.com/2.2/tags?site=stackoverflow').then(res => setOptions(res.data.items))\n\n  }, [])\n\n\n  return (\n    <section >\n      <Drag options={options} />\n      <Tasktwo />\n    </section>\n\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}